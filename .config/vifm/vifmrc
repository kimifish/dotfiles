" vim: filetype=vim fdm=marker ts=4 sw=4
" ------------------------------------------------------------------------------

" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.
set vicmd=vim
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash

" This is how many directories to store in the directory history.
set history=100

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).
" set fastrun

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press return on the file name set this.
set norunexec

" Selected color scheme
"colorscheme papercolor-dark
colorscheme cyberpunk

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt=%m/%d\ %H:%M

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look
set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

"
" Customize view columns a bit (enable ellipsis for truncated file names)
let $VIFM_SHOW_MTIME = '13{mtime}'
let $VIFM_SHOW_PERMS = '12{perms}'
let $VIFM_SHOW_SIZE = '6{size}'
let $VIFM_SHOW_NAME = '-{name}..'
" Viewcolumns set up by RenewFileInfo down there ↓↓↓ in commands section

" Microseconds till drawing graphics in preview, useful when scrolling
" set previewoptions=graphicsdelay:500000

" 'mouse'
" Contains a sequence of single-character flags:
" - a - all supported modes (a shorthand for all the rest and future additions)
" - c - command-line mode (includes navigation mode)
" - m - menu mode
" - n - normal mode
" - q - view mode
" - v - visual mode
set mouse=a

" Filter-out build and temporary files
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/
 
" The idea is to make shell indicate whether it was run inside by Vifm and exiting it will bring Vifm back or not.
let $INSIDE_VIFM = 'true'

" {{{ --- Persistence ---
" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=
    \dhistory,
    \savedirs,
    \chistory,
    \state,
    \tui,
    \shistory,
    \phistory,
    \fhistory,
    \dirstack,
    \registers,
    \bookmarks,
    \bmarks
" }}}

" {{{ --- Marks ---

" :mark mark /full/directory/path [filename]

mark b ~/bin/
mark h ~/
mark i ~/.config/i3
mark c ~/.config
mark d ~/Downloads

mark E /etc
mark S /usr/lib/systemd/system
mark U /usr/lib/systemd/user
" }}}

" {{{ --- Commands ---

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart

command RenewFileInfo :execute 'set' 'viewcolumns="' . $VIFM_SHOW_NAME . ',' . $VIFM_SHOW_SIZE . ',' . $VIFM_SHOW_PERMS . ',' . $VIFM_SHOW_MTIME . '"'
RenewFileInfo

" RenewFileTree
" command ChangeFilesInTreeViewer :
"     \| if executable('eza')
"     \| echo '-='.$VIFM_SHOW_FILES_IN_TREE.'=-'
"     \|    execute 'fileviewer' '*/' 'eza -Tl' . $VIFM_SHOW_FILES_IN_TREE . ' --color-scale=all --no-time --no-permissions --no-user --total-size --color=always --icons=always --follow-symlinks %c'
"     \|    execute 'fileviewer' '.*/' 'eza -Tl' . $VIFM_SHOW_FILES_IN_TREE . ' --color-scale=all --no-time --no-permissions --no-user --total-size --color=always --icons=always --follow-symlinks %c'
"     \| elseif executable('tree')
"     \| echo 'here'
"     " \|    fileviewer */ tree -hC --du %c
"     " \|    fileviewer .*/ tree -hC --du %c
"     \| else
"     \| echo 'here'
"     " \|    fileviewer */ ls -l %c
"     \| endif
let $VIFM_SHOW_FILES_IN_TREE = 'D'  " Show only dirs, not files

command SwitchMtime :
    \| if $VIFM_SHOW_MTIME == ''
    \| let $VIFM_SHOW_MTIME = '13{mtime}'
    \| else
    \| let $VIFM_SHOW_MTIME = ''
    \| endif
    \| RenewFileInfo

command SwitchPerms :
    \| if $VIFM_SHOW_PERMS == ''
    \| let $VIFM_SHOW_PERMS = '12{perms}'
    \| else
    \| let $VIFM_SHOW_PERMS = ''
    \| endif
    \| RenewFileInfo

command SwitchSize :
    \| if $VIFM_SHOW_SIZE == ''
    \| let $VIFM_SHOW_SIZE = '6{size}'
    \| else
    \| let $VIFM_SHOW_SIZE = ''
    \| endif
    \| RenewFileInfo

command SwitchFilesInTree :
    \| if $VIFM_SHOW_FILES_IN_TREE == ''
    \| let $VIFM_SHOW_FILES_IN_TREE = 'D'
    \| echo "Files hidden from tree."
    \| else
    \| let $VIFM_SHOW_FILES_IN_TREE = ''
    \| echo "Files now shown in tree."
    \| endif
    " \| ChangeFilesInTreeViewer

command OpenInVimLower :
    \| !tmux split-window -v -c "#{pane_current_path}" vim %f

" }}}

" {{{ === filetype ===

" :filet[ype] pattern-list [{descr}]def_prog[ &],[{descr}]prog2[ &],...

" associate given program list to each of the patterns. Associated program (command) is used by handlers of l and Enter keys (and also in the :file menu). If you need to insert comma into command just double it (",,"). Space followed by an ampersand as two last characters of a command means running of the command in the background. Optional description can be given to each command to ease understanding of what command will do in the :file menu. Vifm will try the rest of the programs for an association when the default isn't found. When program entry doesn't contain any of vifm macros, name of current file is appended as if program entry ended with %c macro on *nix and %"c on Windows. On Windows path to executables containing spaces can (and should be for correct work with such paths) be double quoted. See "Patterns" section below for pattern definition and "Selection" section for how selection is handled. See also "Automatic FUSE mounts" section below. Example for zip archives and several actions:

" filetype *.zip,*.jar,*.war,*.ear
" \ {Mount with fuse-zip}
" \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
" \ {View contents}
" \ zip -sf %c | less,
" \ {Extract here}
" \ tar -xf %c,

" code files
filetype *.(py|java|css|js|json|md|rs|yaml|yml|vim|txt|sh|bash|zsh) ",.*rc,Makefile,Makefile.*
       \ {Mount with fuse-7z}
       \ vim %f,

filetype *.epub,*.epub3,*.fb2,*.mobi,*.azw,*.azw3
        \ {View in epy}
        \ epy %f

filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c,
       \ {Play using MPlayer}
       \ mplayer %f,

filetype *.html,*.htm links, lynx
" Object
filetype *.o nm %f | less
" Man page
filetype *.[1-8] man ./%c
"
" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,
"
" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype *.asc
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype *.torrent ktorrent %f &

" TuDu files
filetype *.tudu tudu -f %c

        " For automated FUSE mounts, you must register an extension with :file[x]type
        " in one of following formats:
        "
        " :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
        " %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
        " A sample line might look like this:
        " :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
        "
        " :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
        " %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
        " A sample line might look like this:
        " :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
        " %PARAM value is filled from the first line of file (whole line).
        " Example first line for SshMount filetype: root@127.0.0.1:/
        "
        " You can also add %CLEAR if you want to clear screen before running FUSE
        " program.
" FuseZipMount
filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c,
" ArchiveMount
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
" Rar2FsMount and rar archives
filetype *.rar
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
" IsoMount
filetype *.iso
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,
" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,
" Fuse7z and 7z archives
filetype *.7z
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer
" }}}

" {{{ === filextype ===
"
" :filex[type] pattern-list [{ description }] def_program,program2,...

" same as :filetype, but this command is ignored if not running in X. In X :filextype is equal to :filetype. See "Patterns" section below for pattern definition and "Selection" section for how selection is handled. See also "Automatic FUSE mounts" section below.

" {{{ For example, consider the following settings (the order might seem strange, but it's for the demonstration purpose):

        " filetype *.html,*.htm
        " \ {View in lynx}
        " \ lynx
        " filextype *.html,*.htm
        " \ {Open with dwb}
        " \ dwb %f %i &,
        " filetype *.html,*.htm
        " \ {View in links}
        " \ links
        " filextype *.html,*.htm
        " \ {Open with firefox}
        " \ firefox %f &,
        " \ {Open with uzbl}
        " \ uzbl-browser %f %i &,

" If you're using vifm inside a terminal emulator that is running in graphical environment (when X is used on *nix; always on Windows), vifm attempts to run application in this order:

        " 1. lynx
        " 2. dwb
        " 3. links
        " 4. firefox
        " 5. uzbl

" If there is no graphical environment (checked by presence of non-empty $DISPLAY or $WAYLAND_DISPLAY environment variable on *nix; never happens on Windows), the list will look like:

        " 1. lynx
        " 2. links

" Just as if all :filextype commands were not there.

" The purpose of such differentiation is to allow comfortable use of vifm with same settings in desktop environment/through remote connection (SSH)/in native console.
" }}}
" Pdf
filextype *.pdf setsid zathura %c %i, apvlv %c, xpdf %c
" PostScript
filextype *.ps,*.eps,*.ps.gz
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,

" Video
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {View in timg}
        \ timg --title --center --clear %f,
		\ {View using ffplay}
		\ ffplay -fs -autoexit %f,
		\ {View using Dragon}
		\ dragon %f:p,
		\ {View using mplayer}
		\ mplayer %f,
" Djvu
filextype *.djvu
        \ {View in zathura}
        \ zathura %f,
        \ {View in apvlv}
        \ apvlv %f,

" Web
filextype *.html,*.htm
        \ {Open with quteBrowser}
        \ qutebrowser %f %i &,
        \ {Open with firefox}
        \ firefox %f &,
        \ {Open with uzbl}
        \ uzbl-browser %f %i &,

" Images
"filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
        "\ {View in timg}
        "\ timg --title --center --clear %f; read -n1 -s -r -p "Press any key to return",
filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
		\ {View in sxiv}
		\ sxiv %f,
		\ {View in gpicview}
		\ gpicview %c,
		\ {View in shotwell}
		\ shotwell,

" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" Office files
filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &

" Qt projects
filextype *.pro qtcreator %f &

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,
" }}}

" {{{ === fileviewer ===
"
" :filev[iewer] pattern-list command1,command2,...

" register specified list of commands as viewers for each of the patterns. Viewer is a command which output is captured and displayed in one of the panes of vifm after pressing "e" or running :view command. When the command doesn't contain any of vifm macros, name of current file is appended as if command ended with %c macro. Comma escaping and missing commands processing rules as for :filetype apply to this command. See "Patterns" section below for pattern definition. Supports Lua handlers.

" Example for zip archives:

" fileviewer *.zip,*.jar,*.war,*.ear zip -sf %c, echo "No zip to preview:"
"
" Directories
if executable('eza')
   execute 'fileviewer' '*/' 'eza -Tl$VIFM_SHOW_FILES_IN_TREE --color-scale=all --no-time --no-permissions --no-user --total-size --color=always --icons=always --follow-symlinks %c'
   execute 'fileviewer' '.*/' 'eza -Tl$VIFM_SHOW_FILES_IN_TREE --color-scale=all --no-time --no-permissions --no-user --total-size --color=always --icons=always --follow-symlinks %c'
elseif executable('tree')
   execute 'fileviewer' '*/' 'tree -hC --du %c'
   execute 'fileviewer' '.*/' 'tree -hC --du %c'
endif

" Man page
fileviewer *.[1-8] man ./%c | col -b

" fileviewer *.deb highlight dpkg -I %f
fileviewer *.deb highlight -O xterm256 -s dante --syntax logtalk <<< `dpkg -I %c`

fileviewer *.mp3 eyeD3 %c 2>/dev/null
fileviewer *.flac soxi

fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]
         \ ffprobe -pretty %c 2>&1

fileviewer *.pdf pdftotext -nopgbrk %c -
fileviewer *.html,*.htm elinks -dump
fileviewer *.doc highlight -O xterm256 -s dante --syntax text <<< `catdoc %c`
fileviewer *.txt highlight -O xterm256 -s dante --syntax text <<< `cat %c`
fileviewer *.docx highlight -O xterm256 -s dante --syntax text <<< `docx2txt %f` 
fileviewer *.epub,*.epub3,*.fb2,*.mobi,*.azw,*.azw3 epy -d %f

fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
    \ kitten icat --silent --transfer-mode=file --place=%pwx%ph@%pxx%py %c >/dev/tty </dev/tty %N
    \ %pc
    \ kitten icat --clear --silent >/dev/tty </dev/tty %N
         " \ chafa -s 80x65 -c full %f
         " \ chafa -s 60x65 -c 256 %f
		 " viu %f -1 -w 55
         "\ identify %f

fileviewer *.torrent dumptorrent -v %c

fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tar tar -tf %c
fileviewer *.7z 7z l %c
fileviewer *.rar unrar v %c
fileviewer *.iso,*.img
       \ ls -l %f

fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
fileviewer *.py highlight -l -O xterm256 -s dante --syntax python %c
fileviewer *.css highlight -O xterm256 -s dante --syntax css %c
fileviewer *.js highlight -O xterm256 -s dante --syntax js %c
fileviewer *.java highlight -O xterm256 -s dante --syntax java %c
fileviewer *.json highlight -O xterm256 -s dante --syntax json %c
fileviewer *.lua highlight -O xterm256 -s dante --syntax lua %c
fileviewer *.md highlight -O xterm256 -s dante --syntax markdown %c
fileviewer *.rs highlight -O xterm256 -s dante --syntax rs %c
fileviewer *.yaml,*.yml highlight -O xterm256 -s dante --syntax yaml %c
fileviewer *.vim,.vimrc highlight -O xterm256 -s dante --syntax vimscript %c
fileviewer *.txt highlight -O xterm256 -s dante --syntax txt %c
fileviewer Dockerfile highlight -O xterm256 -s dante --syntax docker %c
fileviewer *.sh,*.bash,*.zsh,.profile,.bashrc,.zshrc highlight -O xterm256 -s dante --syntax sh %c
fileviewer *.ovpn highlight -O xterm256 -s dante --syntax conf %c
fileviewer *.xml,*.csproj,*.dtd,*.ecf,*.ent,*.glade,*.hdr,*.hub,*.jnlp,*.nrm,*.resx,*.sgm,*.sgml,*.tld,*.vxml,*.wml,*.xsd,*.xsl highlight -O xterm256 -s dante --syntax xml %c
fileviewer *.conf,.*rc,.*conf,*rc highlight -O xterm256 -s dante --syntax conf %c
fileviewer *.ini highlight -O xterm256 -s dante --syntax ini %c
fileviewer *.html,*.htm highlight -O xterm256 -s dante --syntax html %c

"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g
" }}}

" {{{ --- Mappings ---

nnoremap xt :SwitchMtime<cr>
nnoremap xp :SwitchPerms<cr>
nnoremap xs :SwitchSize<cr>

" Start shell in current directory
nnoremap s :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

nnoremap <A-k>       <C-w>w5k<C-w>w
nnoremap <Esc>j   <C-w>w10j<C-w>w

" Open file in existing instance of gvim
" nnoremap o :!vim --remote-tab-silent %f<cr>
nnoremap o :!tmux split-window -v -c "#{pane_current_pane}" vim %f<cr>
" Open file in new instance of gvim
nnoremap O :!vim %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Interaction with system clipboard
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('xclip')
    " Yank current directory path into the clipboard
    nnoremap yd :!echo %d | xclip %i<cr>
    " Yank current file path into the clipboard
    nnoremap yf :!echo %c:p | xclip %i<cr>
elseif executable('xsel')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                \ echo -n %d | xsel --clipboard --input %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                \ echo -n %c:p | xsel --clipboard --input %i<cr>
endif

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
" nnoremap A cw

" Change other pane to the directory under cursor
nnoremap gc :cd %d %c<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!batcat %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" Seamless navigation in tmux/vim/vifm windows
"set wincmd='<c-w>'
" nnoremap <silent> <c-h> :if paneisat('left') || layoutis('hsplit') | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>
" nnoremap <silent> <c-j> :if paneisat('bottom') | execute '!tmux select-pane -D %i' | else | execute 'wincmd j' | endif<cr>
" nnoremap <silent> <c-k> :if paneisat('top')    | execute '!tmux select-pane -U %i' | else | execute 'wincmd k' | endif<cr>
" nnoremap <silent> <c-l> :if (paneisat('right') || layoutis('hsplit')) | execute '!tmux select-pane -R %i' | else | execute 'wincmd l' | endif<cr>
nnoremap <silent> <c-h> :if paneisat('left')   | execute '!tmux if -F "#{pane_at_left}" "run ' . "'" . 'i3-msg focus left' . "'" . '" "select-pane -L" %i' | else | execute 'wincmd h' | endif<cr>
nnoremap <silent> <c-j> :if paneisat('bottom') | execute '!tmux if -F "#{pane_at_bottom}" "run ' . "'" . 'i3-msg focus down' . "'" . '" "select-pane -D" %i' | else | execute 'wincmd j' | endif<cr>
nnoremap <silent> <c-k> :if paneisat('top')    | execute '!tmux if -F "#{pane_at_top}" "run ' . "'" . 'i3-msg focus up' . "'" . '" "select-pane -U" %i' | else | execute 'wincmd k' | endif<cr>
nnoremap <silent> <c-l> :if paneisat('right')  | execute '!tmux if -F "#{pane_at_right}" "run ' . "'" . 'i3-msg focus right' . "'" . '" "select-pane -R" %i' | else | execute 'wincmd l' | endif<cr>
" account for <c-h>/<bs> conflict
nnoremap <silent> <bs>  :if paneisat('left')   | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>

" qunmap <c-h>
" qunmap <c-j>
" qunmap <c-k>
" qunmap <c-l>
" qunmap <bs>

qnoremap <silent> <c-h> :if paneisat('left')   | execute '!tmux if -F "#{pane_at_left}" "run ' . "'" . 'i3-msg focus left' . "'" . '" "select-pane -L" %i' | else | execute 'wincmd h' | endif<cr>
qnoremap <silent> <c-j> :if paneisat('bottom') | execute '!tmux if -F "#{pane_at_bottom}" "run ' . "'" . 'i3-msg focus down' . "'" . '" "select-pane -D" %i' | else | execute 'wincmd j' | endif<cr>
qnoremap <silent> <c-k> :if paneisat('top')    | execute '!tmux if -F "#{pane_at_top}" "run ' . "'" . 'i3-msg focus up' . "'" . '" "select-pane -U" %i' | else | execute 'wincmd k' | endif<cr>
qnoremap <silent> <c-l> :if paneisat('right')  | execute '!tmux if -F "#{pane_at_right}" "run ' . "'" . 'i3-msg focus right' . "'" . '" "select-pane -R" %i' | else | execute 'wincmd l' | endif<cr>
" account for <c-h>/<bs> conflict
qnoremap <silent> <bs>  :if paneisat('left')   | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>
" }}}

" {{{ --- Icons ---
" Ranger devicons for ViFM
" https://github.com/cirala/vifm_devicons
"
" Filetypes/directories
set classify=' :dir:/,:exe: , :reg:, :link:,? :?:, ::../::'
"set classify+=':exe:ﮧ'

" Specific files
set classify+=' ::.Xdefaults,,.Xresources,,.bashprofile,,.bash_profile,,.bashrc,,.dmrc,,.d_store,,.fasd,,.gitconfig,,.gitignore,,.jack-settings,,.mime.types,,.nvidia-settings-rc,,.pam_environment,,.profile,,.recently-used,,.selected_editor,,.xinitpurc,,.zprofile,,.yarnc,,.snclirc,,.tmux.conf,,.urlview,,.config,,.ini,,.user-dirs.dirs,,.mimeapps.list,,.offlineimaprc,,.msmtprc,,.Xauthority,,config::'
set classify+=' ::dropbox::'
set classify+=' ::favicon.*,,README,,readme::'
set classify+=' ::.vim,,.vimrc,,.gvimrc,,.vifm::'
set classify+=' ::gruntfile.coffee,,gruntfile.js,,gruntfile.ls::'
set classify+=' ::gulpfile.coffee,,gulpfile.js,,gulpfile.ls::'
set classify+=' ::ledger::'
set classify+=' ::license,,copyright,,copying,,LICENSE,,COPYRIGHT,,COPYING::'
set classify+=' ::node_modules::'
set classify+=' ::react.jsx::'

" File extensions
set classify+='λ ::*.ml,,*.mli::'
set classify+=' ::*.styl::'
set classify+=' ::*.scss::'
set classify+=' ::*.py,,*.pyc,,*.pyd,,*.pyo::'
set classify+=' ::*.php::'
set classify+=' ::*.markdown,,*.md::'
set classify+=' ::*.json::'
set classify+=' ::*.js::'
set classify+=' ::*.bmp,,*.gif,,*.ico,,*.heic,,*.jpeg,,*.jpg,,*.png,,*.svg,,*.svgz,,*.tga,,*.tiff,,*.xmb,,*.xcf,,*.xpm,,*.xspf,,*.xwd,,*.cr2,,*.dng,,*.3fr,,*.ari,,*.arw,,*.bay,,*.crw,,*.cr3,,*.cap,,*.data,,*.dcs,,*.dcr,,*drf,,*.eip,,*.erf,,*.fff,,*.gpr,,*.iiq,,*.k25,,*.kdc,,*.mdc,,.*mef,,*.mos,,.*.mrw,,.*.obm,,*.orf,,*.pef,,*.ptx,,*.pxn,,*.r3d,,*.raf,,*.raw,,*.rwl,,*.rw2,,*.rwz,,*.sr2,,*.srf,,*.srf,,*.srw,,*.tif,,*.x3f::'
set classify+=' ::*.ejs,,*.htm,,*.html,,*.slim,,*.xml::'
set classify+=' ::*.mustasche::'
set classify+=' ::*.css,,*.less,,*.bat,,*.conf,,*.ini,,*.rc,,*.yml,,*.cfg,,*.rc::'
set classify+=' ::*.rss::'
set classify+=' ::*.coffee::'
set classify+=' ::*.twig::'
set classify+=' ::*.c++,,*.cpp,,*.cxx,,*.h::'
set classify+=' ::*.cc,,*.c::'
set classify+=' ::*.hs,,*.lhs::'
set classify+=' ::*.lua::'
set classify+=' ::*.jl::'
set classify+=' ::*.go::'
set classify+=' ::*.ts::'
set classify+=' ::*.db,,*.dump,,*.sql::'
set classify+=' ::*.sln,,*.suo::'
set classify+=' ::*.exe::'
set classify+=' ::*.diff,,*.sum,,*.md5,,*.sha512::'
set classify+=' ::*.scala::'
set classify+=' ::*.java,,*.jar::'
set classify+=' ::*.xul::'
set classify+=' ::*.clj,,*.cljc::'
set classify+=' ::*.pl,,*.pm,,*.t::'
set classify+=' ::*.cljs,,*.edn::'
set classify+=' ::*.rb::'
set classify+=' ::*.fish,,*.sh,,*.bash,,*.zsh::'
set classify+=' ::*.dart::'
set classify+=' ::*.f#,,*.fs,,*.fsi,,*.fsscript,,*.fsx::'
set classify+=' ::*.rlib,,*.rs::'
set classify+=' ::*.d::'
set classify+=' ::*.erl,,*.hrl::'
set classify+=' ::*.ai::'
set classify+=' ::*.psb,,*.psd::'
set classify+=' ::*.jsx::'
set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
set classify+=' ::*.avi,,*.flv,,*.mkv,,*.mov,,*.mov,,*.mp4,,*.mpeg,,*.mpg,,*.webm::'
set classify+=' ::*.epub,,*.pdf,,*.fb2,,*.djvu::'
set classify+=' ::*.7z,,*.apk,,*.bz2,,*.cab,,*.cpio,,*.deb,,*.gem,,*.gz,,*.gzip,,*.lh,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.tar,,*.tgz,,*.xz,,*.zip::'
set classify+=' ::*.cbr,,*.cbz::'
set classify+=' ::*.log::'
set classify+=' ::*.doc,,*.docx,,*.adoc,,*.odt::'
set classify+=' ::*.xls,,*.xls,,*.xlsmx::'
set classify+=' ::*.pptx,,*.ppt::'
" }}}

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername
"
